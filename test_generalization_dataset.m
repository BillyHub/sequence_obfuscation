% Test generalization obfuscation method on dataset sequences
clear all

%% parameters initialization
l = 2;% pattern length
h = 10;% pattern letter maximum distance
group_size = 5;% for generalization resolution

%% load the dataset sequence for each user
% load the location set
load('RealityMiningSample/topTowerList_Top20.mat');
r = size(topTowerList, 2);
% load the dataset sequences
load('RealityMiningSample/user_wholeSeq_sampling_topTower20_10mins_truncated1000_droppedLessThan.mat');
n = size(user_wholeSeq_sampling_truncated,2);
% translate the original data sequence to natural numbers
keySet = topTowerList;
valueSet = 1:r;
M = containers.Map(keySet, valueSet);
user_sequence = {};
user1_search = true;
valid_user_num = 0;% count the number of users whose sequence is not empty
for userIndex = 1:n
    seqLen = size(user_wholeSeq_sampling_truncated{1,userIndex},2);
    if (seqLen > 0)
        if (user1_search)% treat the first valid user as user1
            user1_index = userIndex;
            user1_search = false;
            m = size(user_wholeSeq_sampling_truncated{1,userIndex},2);
        end
        for seq_idx = 1:seqLen
            user_sequence{1,userIndex}(seq_idx) = M(user_wholeSeq_sampling_truncated{1,userIndex}(seq_idx));
        end
        valid_user_num = valid_user_num + 1;
    end
end

%% generate the superstring generated by the de bruijn sequence
superstring_seq = de_bruijn_sequence(r,l) + 1; % adding one for superstring offset

%% define the validation varaible for each obfuscation method
%percent_generalization = obfuscation_generalization(user_sequence, r, group_size, n, valid_user_num, l, h, 1e4)
percent_deBruijnObf = [];

%% executing superstring-based obfuscation
iteration = 1e3;
for p_obf = 0:0.1:0.5
    percentage_vec = [];
    tic
    for iter = 1:iteration
        user1_pattern = randi([1,r],1,l);
        percentage = obfuscation_superstring(user_sequence, superstring_seq, user1_pattern, n, valid_user_num, p_obf, l, h, 1e3);
        percentage_vec = [percentage_vec, percentage]; 
    end
    toc
    percent_deBruijnObf = [percent_deBruijnObf, mean(percentage_vec)]
end
%{
%% plot the figure in terms of p_obf
figure;
p = 0.1:0.1:0.5;
plot(p, percent_randomObf, 'og-');hold on;
%plot(p, percent_randomObf_theory, 'dr-');hold on;
plot(p, percent_deBruijnObf, 'dr-');hold on;
plot(p, percent_algorithm1, 'xb-');hold on;
%plot(p, percent_algorithm1_theory, 'dr-');hold on;
plot(p, percent_algorithm2, 'sk-');hold on;
plot(p,percent_algorithm3, 'vm-');
xlabel('p_{obf}');ylabel('validation percentage');
legend('random obf', 'de bruijn obf','algorithm1 obf','algorithm2 obf', 'algorithm3 obf', 'Location','southeast');
grid on;
set(gcf,'Position',[100 100 500 400])
%title('r = 20 + l, m = 1000, l = 3, h = 10, using dataset sequence');
%}